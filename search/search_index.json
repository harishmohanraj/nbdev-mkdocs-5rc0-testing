{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nbdev-mkdocs-5rc0-testing","text":"<p>This file will become your README and also the index of your documentation.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install nbdev_mkdocs_5rc0_testing\n</code></pre>"},{"location":"#how-to-use","title":"How to use","text":"<p>Fill me in please! Don\u2019t forget code examples:</p> <pre><code>1+1\n</code></pre> <pre><code>2\n</code></pre>"},{"location":"00_core/","title":"core","text":"<p>source</p>"},{"location":"00_core/#foo","title":"foo","text":"<pre><code> foo ()\n</code></pre> <p>Docstring for <code>foo</code></p>"},{"location":"Fixture/","title":"Fixture","text":"<p>source</p>"},{"location":"Fixture/#car","title":"Car","text":"<pre><code> Car (make:str, model:str, year:int, color:str)\n</code></pre> <p>A class representing a car.</p> <p>Attributes: make: The make of the car. model: The model of the car. year: The year the car was made. color: The color of the car.</p> <pre><code>car = Car(\"Honda\", \"City\", 2021, \"red\")\ncar.start()\n</code></pre> <p>source</p>"},{"location":"Fixture/#carpatched_method_in_same_file","title":"Car.patched_method_in_same_file","text":"<pre><code> Car.patched_method_in_same_file (s:str)\n</code></pre> <p>I am a patched method in the same file</p> <p>Args: s: string</p> <p>Returns: prepare</p> <pre><code>car = Car(\"Honda\", \"City\", 2021, \"red\")\ncar.patched_method_in_same_file(\"world\")\n</code></pre> <pre><code>&lt;function nbdev_mkdocs.mkdocs.prepare(root_path: str, use_relative_doc_links: bool = False, no_test: bool = False, no_mkdocs_build: bool = False) -&gt; None&gt;\n</code></pre> <pre><code>Car.i_am_a_static_method(\"world!\")\n</code></pre> <pre><code>'Hello, world!'\n</code></pre> <pre><code>Car.i_am_a_class_method()\n</code></pre> <pre><code>'Nothing'\n</code></pre>"},{"location":"Fixture_Two/","title":"Fixture Two","text":"<p>source</p>"},{"location":"Fixture_Two/#carpatched_method_from_a_different_file","title":"Car.patched_method_from_a_different_file","text":"<pre><code> Car.patched_method_from_a_different_file (s:str)\n</code></pre> <p>I am a patched method from a different file</p> <p>Args: s: string</p> <p>Returns: A string</p> <pre><code>car = Car(\"Honda\", \"City\", 2021, \"red\")\ncar.patched_method_from_a_different_file(\"world\")\n</code></pre> <pre><code>'Hello, world.'\n</code></pre>"},{"location":"Guide/","title":"This is a guide","text":"<p>This is a link to the symbol foo: <code>foo</code></p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>nbdev-mkdocs-5rc0-testing</li> <li>Guides<ul> <li>This is a guide</li> </ul> </li> <li>API<ul> <li>nbdev_mkdocs_5rc0_testing<ul> <li>core<ul> <li>foo</li> </ul> </li> <li>fixture<ul> <li>Car</li> </ul> </li> </ul> </li> </ul> </li> <li>CLI<ul> <li>Not found</li> </ul> </li> <li>Releases</li> </ul>"},{"location":"changelog_not_found/","title":"Releases","text":""},{"location":"changelog_not_found/#changelogmd-file-not-found","title":"CHANGELOG.md file not found.","text":"<p>To generate the changelog file, please run the following command from the project root directory. </p> <pre><code>nbdev_changelog\n</code></pre> <p>If you do not want this page to be rendered as part of the documentation, please remove the following line from the mkdocs/summary_template.txt file and build the docs again.</p> <pre><code>- [Releases]{changelog}\n</code></pre>"},{"location":"cli_commands_not_found/","title":"No CLI commands found in console_scripts in settings.ini file.","text":"<p>For documenting CLI commands, please add command line executables in <code>console_scripts</code> in <code>settings.ini</code> file. </p> <p>If you do not want this page to be rendered as part of the documentation, please remove the following lines from the mkdocs/summary_template.txt file and build the docs again.</p> <pre><code>- CLI\n{cli}\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/core/foo/","title":"foo","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/core/foo/#nbdev_mkdocs_5rc0_testing.core.foo","title":"<code>nbdev_mkdocs_5rc0_testing.core.foo()</code>","text":"<p>Docstring for <code>foo</code></p> Source code in <code>nbdev_mkdocs_5rc0_testing/core.py</code> <pre><code>def foo(): \n\"\"\"Docstring for `foo`\"\"\"\n    pass\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/","title":"Car","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car","title":"<code>nbdev_mkdocs_5rc0_testing.fixture.Car</code>","text":"<p>A class representing a car.</p> <p>Attributes:</p> Name Type Description <code>make</code> <p>The make of the car.</p> <code>model</code> <p>The model of the car.</p> <code>year</code> <p>The year the car was made.</p> <code>color</code> <p>The color of the car.</p> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>class Car:\n\"\"\"A class representing a car.\n\n    Attributes:\n        make: The make of the car.\n        model: The model of the car.\n        year: The year the car was made.\n        color: The color of the car.\n    \"\"\"\n    SOME_ATTRIBUTE = \"Some class attribute\"\n\n    def __init__(self, make: str, model: str, year: int, color: str):\n\"\"\"Initialize a new car.\n\n        Args:\n            make: The make of the car.\n            model: The model of the car.\n            year: The year the car was made.\n            color: The color of the car.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.is_running = False\n\n    def __len__(self):\n\"\"\"len function\"\"\"\n        return 5\n\n    def start(self):\n\"\"\"Start the car.\"\"\"\n        self.is_running = True\n\n    def stop(self):\n\"\"\"Stop the car.\"\"\"\n        self.is_running = False\n\n    def drive(\n        self,\n        distance: float,\n        speed: Optional[float] = None,\n        passengers: Optional[int] = None,\n    ) -&gt; float:\n\"\"\"Drive the car a certain distance at an optional speed with an optional number of passengers and\n        return the distance driven.\n\n        Args:\n            distance: The distance to drive in kilometers.\n            speed: The speed to drive at in kilometers per hour. Defaults to None.\n            passengers: The number of passengers in the car. Defaults to None.\n\n        Returns:\n            The distance driven in kilometers.\n        \"\"\"\n        if not self.is_running:\n            raise ValueError(\"Cannot drive a stopped car.\")\n\n        if speed:\n            print(f\"Driving at {speed} km/h.\")\n\n        if passengers:\n            print(f\"Driving with {passengers} passengers.\")\n\n        return distance\n\n    def random_method(self, nb_lookup: NbdevLookup, d:TemporaryDirectory, p: foo): \n\"\"\"random_method\n\n        Args:\n            nb_lookup: nb_lookup\n            d: TemporaryDirectory\n            p: prepare\n        \"\"\"\n        return f\"random_method.\"\n\n    def patched_method_in_same_file(self, s: str) -&gt; foo:\n        raise NotImplementedError()\n\n    def patched_method_from_a_different_file(self, s: str) -&gt; str:\n        raise NotImplementedError()\n\n    @staticmethod\n    def i_am_a_static_method(name: str) -&gt; str:\n\"\"\"I am a static method\n\n        Args:\n            name: Name to say hello\n\n        Returns:\n            A string\n\n        Example:\n\n            ```python\n\n            from  nbdev_mkdocs.docstring import run_examples_from_docstring\n\n            def f():\n                ```python\n                Example:\n                    print(\"Hello {fill in name}!\")\n                    print(\"Goodbye {fill in other_name}!\")\n                ```\n                pass\n\n\n            run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\")\n            ```\n        \"\"\"\n        if not isinstance(name, str):\n            raise ValueError(\"I will accept only string\")\n        return f\"Hello, {name}\"\n\n    @classmethod\n    def i_am_a_class_method(cls):\n\"\"\"I am a class method\n\n        I return \"Nothing\"\n        \"\"\"\n        return f\"Nothing\"\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car-attributes","title":"Attributes","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.SOME_ATTRIBUTE","title":"<code>SOME_ATTRIBUTE = 'Some class attribute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.color","title":"<code>color = color</code>  <code>instance-attribute</code>","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.is_running","title":"<code>is_running = False</code>  <code>instance-attribute</code>","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.make","title":"<code>make = make</code>  <code>instance-attribute</code>","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.model","title":"<code>model = model</code>  <code>instance-attribute</code>","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.year","title":"<code>year = year</code>  <code>instance-attribute</code>","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car-functions","title":"Functions","text":""},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.__init__","title":"<code>__init__(make: str, model: str, year: int, color: str)</code>","text":"<p>Initialize a new car.</p> <p>Parameters:</p> Name Type Description Default <code>make</code> <code>str</code> <p>The make of the car.</p> required <code>model</code> <code>str</code> <p>The model of the car.</p> required <code>year</code> <code>int</code> <p>The year the car was made.</p> required <code>color</code> <code>str</code> <p>The color of the car.</p> required Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>def __init__(self, make: str, model: str, year: int, color: str):\n\"\"\"Initialize a new car.\n\n    Args:\n        make: The make of the car.\n        model: The model of the car.\n        year: The year the car was made.\n        color: The color of the car.\n    \"\"\"\n    self.make = make\n    self.model = model\n    self.year = year\n    self.color = color\n    self.is_running = False\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.__len__","title":"<code>__len__()</code>","text":"<p>len function</p> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>def __len__(self):\n\"\"\"len function\"\"\"\n    return 5\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.drive","title":"<code>nbdev_mkdocs_5rc0_testing.fixture.Car.drive(distance: float, speed: Optional[float] = None, passengers: Optional[int] = None) -&gt; float</code>","text":"<p>Drive the car a certain distance at an optional speed with an optional number of passengers and return the distance driven.</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>float</code> <p>The distance to drive in kilometers.</p> required <code>speed</code> <code>Optional[float]</code> <p>The speed to drive at in kilometers per hour. Defaults to None.</p> <code>None</code> <code>passengers</code> <code>Optional[int]</code> <p>The number of passengers in the car. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The distance driven in kilometers.</p> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>def drive(\n    self,\n    distance: float,\n    speed: Optional[float] = None,\n    passengers: Optional[int] = None,\n) -&gt; float:\n\"\"\"Drive the car a certain distance at an optional speed with an optional number of passengers and\n    return the distance driven.\n\n    Args:\n        distance: The distance to drive in kilometers.\n        speed: The speed to drive at in kilometers per hour. Defaults to None.\n        passengers: The number of passengers in the car. Defaults to None.\n\n    Returns:\n        The distance driven in kilometers.\n    \"\"\"\n    if not self.is_running:\n        raise ValueError(\"Cannot drive a stopped car.\")\n\n    if speed:\n        print(f\"Driving at {speed} km/h.\")\n\n    if passengers:\n        print(f\"Driving with {passengers} passengers.\")\n\n    return distance\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.i_am_a_static_method","title":"<code>nbdev_mkdocs_5rc0_testing.fixture.Car.i_am_a_static_method(name: str) -&gt; str</code>  <code>staticmethod</code>","text":"<p>I am a static method</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name to say hello</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string</p> Example <pre><code>from  nbdev_mkdocs.docstring import run_examples_from_docstring\n\ndef f():\n    ```python\n    Example:\n        print(\"Hello {fill in name}!\")\n        print(\"Goodbye {fill in other_name}!\")\n    ```\n    pass\n\n\nrun_examples_from_docstring(f, name=\"John\", other_name=\"Jane\")\n</code></pre> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>@staticmethod\ndef i_am_a_static_method(name: str) -&gt; str:\n\"\"\"I am a static method\n\n    Args:\n        name: Name to say hello\n\n    Returns:\n        A string\n\n    Example:\n\n        ```python\n\n        from  nbdev_mkdocs.docstring import run_examples_from_docstring\n\n        def f():\n            ```python\n            Example:\n                print(\"Hello {fill in name}!\")\n                print(\"Goodbye {fill in other_name}!\")\n            ```\n            pass\n\n\n        run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\")\n        ```\n    \"\"\"\n    if not isinstance(name, str):\n        raise ValueError(\"I will accept only string\")\n    return f\"Hello, {name}\"\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture_two.patched_method_from_a_different_file","title":"<code>nbdev_mkdocs_5rc0_testing.fixture_two.patched_method_from_a_different_file(self: Car, s: str) -&gt; str</code>","text":"<p>I am a patched method from a different file</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>string</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string</p> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture_two.py</code> <pre><code>@patch\ndef patched_method_from_a_different_file(self:Car, s: str) -&gt; str: \n\"\"\"I am a patched method from a different file\n\n    Args:\n        s: string\n\n    Returns:\n        A string\n    \"\"\"\n    return f\"Hello, {s}.\"\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.patched_method_in_same_file","title":"<code>nbdev_mkdocs_5rc0_testing.fixture.patched_method_in_same_file(self: Car, s: str) -&gt; prepare</code>","text":"<p>I am a patched method in the same file</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>string</p> required <p>Returns:</p> Type Description <code>prepare</code> <p>prepare</p> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>@patch\ndef patched_method_in_same_file(self:Car, s: str) -&gt; prepare: \n\"\"\"I am a patched method in the same file\n\n    Args:\n        s: string\n\n    Returns:\n        prepare\n    \"\"\"\n    return prepare\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.random_method","title":"<code>nbdev_mkdocs_5rc0_testing.fixture.Car.random_method(nb_lookup: NbdevLookup, d: TemporaryDirectory, p: foo)</code>","text":"<p>random_method</p> <p>Parameters:</p> Name Type Description Default <code>nb_lookup</code> <code>NbdevLookup</code> <p>nb_lookup</p> required <code>d</code> <code>TemporaryDirectory</code> <p>TemporaryDirectory</p> required <code>p</code> <code>foo</code> <p>prepare</p> required Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>def random_method(self, nb_lookup: NbdevLookup, d:TemporaryDirectory, p: foo): \n\"\"\"random_method\n\n    Args:\n        nb_lookup: nb_lookup\n        d: TemporaryDirectory\n        p: prepare\n    \"\"\"\n    return f\"random_method.\"\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.start","title":"<code>nbdev_mkdocs_5rc0_testing.fixture.Car.start()</code>","text":"<p>Start the car.</p> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>def start(self):\n\"\"\"Start the car.\"\"\"\n    self.is_running = True\n</code></pre>"},{"location":"api/nbdev_mkdocs_5rc0_testing/fixture/Car/#nbdev_mkdocs_5rc0_testing.fixture.Car.stop","title":"<code>nbdev_mkdocs_5rc0_testing.fixture.Car.stop()</code>","text":"<p>Stop the car.</p> Source code in <code>nbdev_mkdocs_5rc0_testing/fixture.py</code> <pre><code>def stop(self):\n\"\"\"Stop the car.\"\"\"\n    self.is_running = False\n</code></pre>"}]}